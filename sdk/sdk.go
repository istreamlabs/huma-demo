// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package sdk

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ChannelRegion.
const (
	UsEast ChannelRegion = "us-east"
	UsWest ChannelRegion = "us-west"
)

// Defines values for PublishPointDrms.
const (
	Fairplay  PublishPointDrms = "fairplay"
	Playready PublishPointDrms = "playready"
	Widevine  PublishPointDrms = "widevine"
)

// Defines values for PublishPointFormat.
const (
	Dash PublishPointFormat = "dash"
	Hls  PublishPointFormat = "hls"
)

// Defines values for VideoEncoderFramerate.
const (
	N25   VideoEncoderFramerate = 25
	N2997 VideoEncoderFramerate = 29.97
	N30   VideoEncoderFramerate = 30
	N50   VideoEncoderFramerate = 50
	N60   VideoEncoderFramerate = 60
)

// Channel defines model for Channel.
type Channel struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Name The friendly name of the channel.
	Name string `json:"name"`

	// On Whether the channel is currently running.
	On *bool `json:"on,omitempty"`

	// PublishPoints A list of publishing points to use.
	PublishPoints *[]PublishPoint `json:"publish_points,omitempty"`

	// Region The desired region to run the channel in.
	Region ChannelRegion `json:"region"`

	// SegmentDuration The duration of each video segment in seconds.
	SegmentDuration int32 `json:"segment_duration"`

	// Tags A list of tags for the channel.
	Tags *[]string `json:"tags,omitempty"`

	// VideoEncoders A list of video encoder settings use.
	VideoEncoders []VideoEncoder `json:"video_encoders"`
}

// ChannelRegion The desired region to run the channel in.
type ChannelRegion string

// ChannelMeta defines model for ChannelMeta.
type ChannelMeta struct {
	// Etag The content hash for the channel
	Etag string `json:"etag"`

	// Id Channel ID
	Id string `json:"id"`

	// LastModified The last modified time for the channel
	LastModified time.Time `json:"last_modified"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// Location Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
	Location *string `json:"location,omitempty"`

	// Message Error message text
	Message *string `json:"message,omitempty"`

	// Value The value at the given location
	Value *interface{} `json:"value,omitempty"`
}

// ErrorModel defines model for ErrorModel.
type ErrorModel struct {
	// Schema A URL to the JSON Schema for this object.
	Schema *string `json:"$schema,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Errors Optional list of individual error details
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// Status HTTP status code
	Status *int64 `json:"status,omitempty"`

	// Title A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
	Title *string `json:"title,omitempty"`

	// Type A URI reference to human-readable documentation for the error.
	Type *string `json:"type,omitempty"`
}

// PublishPoint defines model for PublishPoint.
type PublishPoint struct {
	// Drms A list of DRM systems to use.
	Drms *[]PublishPointDrms `json:"drms,omitempty"`

	// Format The format to publish in.
	Format PublishPointFormat `json:"format"`

	// Headers A map of headers to include in the request.
	Headers *map[string]string `json:"headers,omitempty"`

	// Id The unique identifier for the publish point.
	Id string `json:"id"`

	// Url The URL to publish to.
	Url string `json:"url"`
}

// PublishPointDrms defines model for PublishPoint.Drms.
type PublishPointDrms string

// PublishPointFormat The format to publish in.
type PublishPointFormat string

// VideoEncoder defines model for VideoEncoder.
type VideoEncoder struct {
	// Bitrate The target bitrate for the video in kbps.
	Bitrate int32 `json:"bitrate"`

	// Framerate The target framerate for the video in frames per second.
	Framerate VideoEncoderFramerate `json:"framerate"`

	// Height The height of the video in pixels. Width & height must result in an aspect ratio of 16:9.
	Height int32 `json:"height"`

	// Id The unique identifier for the encoder.
	Id string `json:"id"`

	// Width The width of the video in pixels. Width & height must result in an aspect ratio of 16:9.
	Width int32 `json:"width"`
}

// VideoEncoderFramerate The target framerate for the video in frames per second.
type VideoEncoderFramerate float64

// ListChannelsParams defines parameters for ListChannels.
type ListChannelsParams struct {
	// Cursor The cursor to use for pagination.
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// PutChannelsByIdParams defines parameters for PutChannelsById.
type PutChannelsByIdParams struct {
	// IfMatch Succeeds if the server's resource matches one of the passed values.
	IfMatch *[]string `json:"If-Match,omitempty"`

	// IfNoneMatch Succeeds if the server's resource matches none of the passed values. On writes, the special value * may be used to match any existing value.
	IfNoneMatch *[]string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Succeeds if the server's resource date is more recent than the passed date.
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`

	// IfUnmodifiedSince Succeeds if the server's resource date is older or the same as the passed date.
	IfUnmodifiedSince *string `json:"If-Unmodified-Since,omitempty"`
}

// PutChannelsByIdJSONRequestBody defines body for PutChannelsById for application/json ContentType.
type PutChannelsByIdJSONRequestBody = Channel

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListChannels request
	ListChannels(ctx context.Context, params *ListChannelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChannelsById request
	DeleteChannelsById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChannelsById request
	GetChannelsById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChannelsByIdWithBody request with any body
	PutChannelsByIdWithBody(ctx context.Context, id string, params *PutChannelsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChannelsById(ctx context.Context, id string, params *PutChannelsByIdParams, body PutChannelsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListChannels(ctx context.Context, params *ListChannelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListChannelsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChannelsById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChannelsByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannelsById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChannelsByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChannelsByIdWithBody(ctx context.Context, id string, params *PutChannelsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChannelsByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChannelsById(ctx context.Context, id string, params *PutChannelsByIdParams, body PutChannelsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChannelsByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListChannelsRequest generates requests for ListChannels
func NewListChannelsRequest(server string, params *ListChannelsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/channels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteChannelsByIdRequest generates requests for DeleteChannelsById
func NewDeleteChannelsByIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/channels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChannelsByIdRequest generates requests for GetChannelsById
func NewGetChannelsByIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/channels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutChannelsByIdRequest calls the generic PutChannelsById builder with application/json body
func NewPutChannelsByIdRequest(server string, id string, params *PutChannelsByIdParams, body PutChannelsByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChannelsByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutChannelsByIdRequestWithBody generates requests for PutChannelsById with any type of body
func NewPutChannelsByIdRequestWithBody(server string, id string, params *PutChannelsByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/channels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

		if params.IfNoneMatch != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam1)
		}

		if params.IfModifiedSince != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam2)
		}

		if params.IfUnmodifiedSince != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "If-Unmodified-Since", runtime.ParamLocationHeader, *params.IfUnmodifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Unmodified-Since", headerParam3)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListChannelsWithResponse request
	ListChannelsWithResponse(ctx context.Context, params *ListChannelsParams, reqEditors ...RequestEditorFn) (*ListChannelsResponse, error)

	// DeleteChannelsByIdWithResponse request
	DeleteChannelsByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChannelsByIdResponse, error)

	// GetChannelsByIdWithResponse request
	GetChannelsByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChannelsByIdResponse, error)

	// PutChannelsByIdWithBodyWithResponse request with any body
	PutChannelsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutChannelsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChannelsByIdResponse, error)

	PutChannelsByIdWithResponse(ctx context.Context, id string, params *PutChannelsByIdParams, body PutChannelsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChannelsByIdResponse, error)
}

type ListChannelsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]ChannelMeta
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r ListChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChannelsByIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r DeleteChannelsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChannelsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelsByIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Channel
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetChannelsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChannelsByIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PutChannelsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChannelsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListChannelsWithResponse request returning *ListChannelsResponse
func (c *ClientWithResponses) ListChannelsWithResponse(ctx context.Context, params *ListChannelsParams, reqEditors ...RequestEditorFn) (*ListChannelsResponse, error) {
	rsp, err := c.ListChannels(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListChannelsResponse(rsp)
}

// DeleteChannelsByIdWithResponse request returning *DeleteChannelsByIdResponse
func (c *ClientWithResponses) DeleteChannelsByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChannelsByIdResponse, error) {
	rsp, err := c.DeleteChannelsById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChannelsByIdResponse(rsp)
}

// GetChannelsByIdWithResponse request returning *GetChannelsByIdResponse
func (c *ClientWithResponses) GetChannelsByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChannelsByIdResponse, error) {
	rsp, err := c.GetChannelsById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelsByIdResponse(rsp)
}

// PutChannelsByIdWithBodyWithResponse request with arbitrary body returning *PutChannelsByIdResponse
func (c *ClientWithResponses) PutChannelsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutChannelsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChannelsByIdResponse, error) {
	rsp, err := c.PutChannelsByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChannelsByIdResponse(rsp)
}

func (c *ClientWithResponses) PutChannelsByIdWithResponse(ctx context.Context, id string, params *PutChannelsByIdParams, body PutChannelsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChannelsByIdResponse, error) {
	rsp, err := c.PutChannelsById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChannelsByIdResponse(rsp)
}

// ParseListChannelsResponse parses an HTTP response from a ListChannelsWithResponse call
func ParseListChannelsResponse(rsp *http.Response) (*ListChannelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ChannelMeta
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteChannelsByIdResponse parses an HTTP response from a DeleteChannelsByIdWithResponse call
func ParseDeleteChannelsByIdResponse(rsp *http.Response) (*DeleteChannelsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChannelsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetChannelsByIdResponse parses an HTTP response from a GetChannelsByIdWithResponse call
func ParseGetChannelsByIdResponse(rsp *http.Response) (*GetChannelsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChannelsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Channel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePutChannelsByIdResponse parses an HTTP response from a PutChannelsByIdWithResponse call
func ParsePutChannelsByIdResponse(rsp *http.Response) (*PutChannelsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChannelsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}
